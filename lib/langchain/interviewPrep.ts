import { ChatOpenAI } from "@langchain/openai";
import { PromptTemplate } from "@langchain/core/prompts";
import { JsonOutputFunctionsParser } from "langchain/output_parsers";
import { logger } from '../logger';
import type { Question } from '../../types';

interface InterviewQuestionSchema {
  name: string;
  description: string;
  parameters: {
    type: string;
    properties: {
      questions: {
        type: string;
        items: {
          type: string;
          properties: {
            type: {
              type: string;
              enum: string[];
              description: string;
            };
            question: {
              type: string;
              description: string;
            };
          };
          required: string[];
        };
      };
    };
    required: string[];
  };
}

interface InterviewQuestionResult {
  questions: Question[];
}

export const generateInterviewQuestions = async (
  company: string,
  role: string,
  interviewType: string = 'mixed'
): Promise<Question[]> => {
  try {
    logger.info('Generating interview questions', { company, role, interviewType });

    const llm = new ChatOpenAI({
      openAIApiKey: process.env.OPENAI_API_KEY,
      modelName: "gpt-4o",
      temperature: 0.5,
    });

    const promptTemplate = PromptTemplate.fromTemplate(`
      You are an expert career coach. Generate 5 high-quality interview questions for the following scenario:
      
      Company: {company}
      Role: {role}
      Interview Type: {interview_type}
      
      Instructions:
      - If the company or role information is generic (like "the company" or "the position"), focus on general interview questions that would apply to most professional situations
      - Include a mix of behavioral, technical (if applicable), and company-specific questions
      - Make questions practical and commonly asked in real interviews
      - If the role suggests technical skills, include at least 1-2 technical questions
      - Keep questions clear and actionable for interview preparation
    `);

    const extractionFunctionSchema: InterviewQuestionSchema = {
      name: "interview_question_generator",
      description: "Generates tailored interview questions for interview preparation.",
      parameters: {
        type: "object",
        properties: {
          questions: {
            type: "array",
            items: {
              type: "object",
              properties: {
                type: {
                  type: "string",
                  enum: ["behavioral", "technical", "company-specific"],
                  description: "The category of the question.",
                },
                question: {
                  type: "string",
                  description: "The interview question text.",
                },
              },
              required: ["type", "question"],
            },
          },
        },
        required: ["questions"],
      },
    };

    const chain = promptTemplate
      .pipe(llm.bind({
        functions: [extractionFunctionSchema],
        function_call: { name: "interview_question_generator" },
      }))
      .pipe(new JsonOutputFunctionsParser());

    const result = await chain.invoke({
      company,
      role,
      interview_type: interviewType,
    }) as InterviewQuestionResult;

    const questions = result.questions || [];

    if (questions.length === 0) {
      logger.warn('No questions generated by AI, providing fallback questions');
      return getFallbackQuestions(role, interviewType);
    }

    logger.info('Interview questions generated successfully', {
      questionCount: questions.length,
      company,
      role
    });

    return questions;
  } catch (error) {
    logger.error('Failed to generate interview questions', error as Error, {
      company,
      role,
      interviewType
    });
    
    logger.info('Providing fallback questions due to generation failure');
    return getFallbackQuestions(role, interviewType);
  }
};

function getFallbackQuestions(role: string, interviewType: string): Question[] {
  const isGeneric = role.toLowerCase().includes('position') || role.toLowerCase().includes('role');
  
  const fallbackQuestions: Question[] = [
    {
      type: 'behavioral',
      question: 'Tell me about a time when you had to overcome a significant challenge at work.'
    },
    {
      type: 'company-specific',
      question: `Why are you interested in ${isGeneric ? 'this position' : `working as a ${role}`}?`
    },
    {
      type: 'behavioral',
      question: 'Describe a situation where you had to work with a difficult team member.'
    },
    {
      type: 'company-specific',
      question: 'What are your greatest strengths and how do they relate to this role?'
    }
  ];

  if (role.toLowerCase().includes('engineer') || role.toLowerCase().includes('developer') || role.toLowerCase().includes('technical')) {
    fallbackQuestions.push({
      type: 'technical',
      question: 'Walk me through your approach to solving a complex technical problem.'
    });
  } else {
    fallbackQuestions.push({
      type: 'company-specific',
      question: 'Where do you see yourself in 5 years?'
    });
  }

  return fallbackQuestions;
}
